yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 CH>TH")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1b1
f1b2 = ggscatter(mutSpecAllMean, x = "temperature", y = "C_T.N",
color = "#9c3d37", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 GH>AH")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1b2
f1c = ggscatter(mutSpecAllMean, x = "temperature", y = "TCdivAG",
color = "#814194", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 A_GdivT_C")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1c
f1d = ggscatter(mutSpecAllMean, x = "temperature", y = "GAdivCT",
color = "#8C99A6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 C_TdivG_A")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1d
cor.test(mutSpecAllMean$A_T.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$A_G.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$A_C.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$T_A.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$T_G.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$T_C.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$G_A.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$G_T.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$G_C.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$C_A.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$C_T.N,mutSpecAllMean$matur_tm, method = 'spearman')
cor.test(mutSpecAllMean$C_G.N,mutSpecAllMean$matur_tm, method = 'spearman')
summary(lm(formula = temperature ~ scale(T_C.N) + scale(G_A.N), data = mutSpecAllMean))
summary(lm(formula = T_C.N ~ scale(temperature) * scale(matur_tm), data = mutSpecAllMean))
summary(lm(formula = T_C.N ~ scale(temperature) + scale(matur_tm), data = mutSpecAllMean))
summary(lm(formula = T_C.N ~ scale(temperature), data = mutSpecAllMean))
summary(lm(formula = G_A.N ~ scale(temperature) * scale(matur_tm), data = mutSpecAllMean))
summary(lm(formula = G_A.N ~ scale(temperature) + scale(matur_tm), data = mutSpecAllMean))
summary(lm(formula = G_A.N ~ scale(temperature), data = mutSpecAllMean))
mutSpecAllMeanNAzeroomit = mutSpecAllMean[!is.na(mutSpecAllMean$TCdivAG),]
mutSpecAllMeanNAzeroomit = mutSpecAllMeanNAzeroomit[mutSpecAllMeanNAzeroomit$TCdivAG != 0,]
mutSpecAllMeanNAzeroomit = mutSpecAllMeanNAzeroomit[!is.na(mutSpecAllMeanNAzeroomit$GAdivCT),]
mutSpecAllMeanNAzeroomit = mutSpecAllMeanNAzeroomit[mutSpecAllMeanNAzeroomit$GAdivCT != 0,]
summary(lm(formula = temperature ~ scale(T_C.N) + scale(G_A.N) + scale(TCdivAG) + scale(GAdivCT), data = mutSpecAllMeanNAzeroomit))
summary(lm(formula = TCdivAG ~ scale(temperature) * scale(matur_tm), data = mutSpecAllMeanNAzeroomit))
summary(lm(formula = TCdivAG ~ scale(temperature) + scale(matur_tm), data = mutSpecAllMeanNAzeroomit))
summary(lm(formula = GAdivCT ~ scale(temperature) * scale(matur_tm), data = mutSpecAllMeanNAzeroomit))
summary(lm(formula = GAdivCT ~ scale(temperature) + scale(matur_tm), data = mutSpecAllMeanNAzeroomit))
summary(lm(formula = TCdivAG ~ scale(temperature), data = mutSpecAllMeanNAzeroomit))
summary(lm(formula = GAdivCT ~ scale(temperature), data = mutSpecAllMeanNAzeroomit))
tree = read.tree('../Data/1raw/mtalign.aln.treefile.rooted')
row.names(mutSpecAllMeanNAzeroomit) = mutSpecAllMeanNAzeroomit$Species
tree_pruned = treedata(tree, mutSpecAllMeanNAzeroomit, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, mutSpecAllMeanNAzeroomit, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$TCdivAG = as.numeric(as.character(data$TCdivAG))
data$temperature = as.numeric(as.character(data$temperature))
data$matur_tm = as.numeric(as.character(data$matur_tm))
data_comp <- comparative.data(tree_pruned, data, Species, vcv=TRUE)
summary(pgls(TCdivAG ~ scale(temperature), data_comp, lambda="ML"))
summary(pgls(log2(TCdivAG) ~ log2(temperature), data_comp, lambda="ML"))
log2(data_comp$data['TCdivAG'])
summary(pgls(log2(TCdivAG) ~ log2(temperature), data_comp, lambda="ML"))
###################################
rm(list=ls(all=TRUE))
library(ggpubr)
library(caper)
library(geiger)
### reading whole genomes database
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
### reading whole genomes database
unzip('AllGenesCodonUsageNoOverlap.zip', header = TRUE")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
### reading whole genomes database
unzip("../Data/3results/AllGenesCodonUsageNoOverlap.zip', header = TRUE")
### reading whole genomes database
unzip("../data/3results/AllGenesCodonUsageNoOverlap.zip', header = TRUE")
### reading whole genomes database
unzip("../data/3results/AllGenesCodonUsageNoOverlap.zip", header = TRUE)
### reading whole genomes database
unzip("../data/3results/AllGenesCodonUsageNoOverlap.zip")
### reading whole genomes database
unzip("../data/31raw/AllGenesCodonUsageNoOverlap.zip")
### reading whole genomes database
unzip("../data/1raw/AllGenesCodonUsageNoOverlap.zip")
SynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../data/1raw/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
if (file.exists("../data/1raw/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../data/1raw/AllGenesCodonUsageNoOverlap")}
if (file.exists("../data/1raw/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../data/1raw/AllGenesCodonUsageNoOverlap.txt")}
### reading whole genomes database
unzip("../data/1raw/AllGenesCodonUsageNoOverlap.zip")
AllSynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../data/1raw/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../data/1raw/AllGenesCodonUsageNoOverlap.txt")}
###################################
rm(list=ls(all=TRUE))
### reading whole genomes database
unzip("../data/1raw/AllGenesCodonUsageNoOverlap.zip")
AllSynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
### reading whole genomes database
unzip("../data/1raw/AllGenesCodonUsageNoOverlap.zip")
### reading whole genomes database
AllSynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
AllSynNuc = AllSynNuc[SynNuc$Gene != 'ND6',]
AllSynNuc = AllSynNuc[AllSynNuc$Gene != 'ND6',]
####### obtaining neutral nucleotide fractions in whole genomes
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
####### obtaining neutral nucleotide fractions in whole genomes
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
####### obtaining neutral nucleotide fractions in whole genomes
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
### reading whole genomes database
AllSynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
AllSynNuc = AllSynNuc[AllSynNuc$Gene != 'ND6',]
View(AllSynNuc)
####### obtaining neutral nucleotide fractions in whole genomes
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
names(AllSynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
AllSynNuc$FrA = AllSynNuc$NeutralA / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrT = AllSynNuc$NeutralT / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrG = AllSynNuc$NeutralG / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrC = AllSynNuc$NeutralC / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
### merge whole genomes with temperature
tm = read.table('../Data/1raw/FishBaseTemperature.txt', header=T)
tm = tm %>% group_by(Species) %>% summarise(temperature = median(Temperature))
library(dplyr)
tm = tm %>% group_by(Species) %>% summarise(temperature = median(Temperature))
matur = read.table('../Data/1raw/FishBaseMaturity_Tm.txt', header=T)
matur = matur %>% group_by(Species) %>% summarise(matur_tm = median(Tm))
AllSynNuc = merge(AllSynNuc, tm, by='Species', all.x=T)
AllSynNuc = merge(AllSynNuc, matur, by='Species', all.x=T)
View(AllSynNuc)
###################################
rm(list=ls(all=TRUE))
library(ggpubr)
library(caper)
library(geiger)
library(dplyr)
### reading whole genomes database
AllSynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
AllSynNuc = AllSynNuc[AllSynNuc$Gene != 'ND6',]
####### obtaining neutral nucleotide fractions in whole genomes
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
names(AllSynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
AllSynNuc$FrA = AllSynNuc$NeutralA / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrT = AllSynNuc$NeutralT / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrG = AllSynNuc$NeutralG / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrC = AllSynNuc$NeutralC / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
### merge whole genomes with temperature
tm = read.table('../Data/1raw/FishBaseTemperature.txt', header=T)
tm = tm %>% group_by(Species) %>% summarise(temperature = median(Temperature))
matur = read.table('../Data/1raw/FishBaseMaturity_Tm.txt', header=T)
matur = matur %>% group_by(Species) %>% summarise(matur_tm = median(Tm))
AllSynNuc = merge(AllSynNuc, tm, by='Species')
AllSynNuc = merge(AllSynNuc, matur, by='Species')
View(AllSynNuc)
###################################
rm(list=ls(all=TRUE))
library(ggpubr)
library(caper)
library(geiger)
library(dplyr)
### reading whole genomes database
AllSynNuc = read.table("../data/1raw/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
AllSynNuc = AllSynNuc[AllSynNuc$Gene != 'ND6',]
####### obtaining neutral nucleotide fractions in whole genomes
AllSynNuc = aggregate(list(AllSynNuc$NeutralA,AllSynNuc$NeutralT,AllSynNuc$NeutralG,AllSynNuc$NeutralC), by = list(AllSynNuc$Species), FUN = sum)
names(AllSynNuc) = c('Species','NeutralA','NeutralT','NeutralG','NeutralC')
AllSynNuc$FrA = AllSynNuc$NeutralA / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrT = AllSynNuc$NeutralT / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrG = AllSynNuc$NeutralG / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
AllSynNuc$FrC = AllSynNuc$NeutralC / (AllSynNuc$NeutralA + AllSynNuc$NeutralT + AllSynNuc$NeutralG + AllSynNuc$NeutralC)
### merge whole genomes with temperature
tm = read.table('../Data/1raw/FishBaseTemperature.txt', header=T)
tm = tm %>% group_by(Species) %>% summarise(temperature = median(Temperature))
matur = read.table('../Data/1raw/FishBaseMaturity_Tm.txt', header=T)
matur = matur %>% group_by(Species) %>% summarise(matur_tm = median(Tm))
AllSynNuc = merge(AllSynNuc, tm, by='Species', all.x=T)
AllSynNuc = merge(AllSynNuc, matur, by='Species', all.x=T)
table(AllSynNuc[!is.na(AllSynNuc$temperature),]$Class)
table(AllSynNuc[!is.na(AllSynNuc$temperature),]$Species)
summary(AllSynNuc[!is.na(AllSynNuc$temperature),]$Species)
AllSynNuc[!is.na(AllSynNuc$temperature),]$Species
AllSynNuc[!is.na(AllSynNuc$temperature),]
nrow(AllSynNuc[!is.na(AllSynNuc$temperature),])
cor.test(log2(AllSynNuc$Temperature),AllSynNuc$FrA, method = "spearman")
cor.test(log2(AllSynNuc$temperature),AllSynNuc$FrA, method = "spearman")
cor.test(log2(AllSynNuc$temperature),AllSynNuc$FrT, method = "spearman")
cor.test(log2(AllSynNuc$temperature),AllSynNuc$FrG, method = "spearman")
cor.test(log2(AllSynNuc$temperature),AllSynNuc$FrC, method = "spearman")
AllSynNuc$TG_ACSkew = (AllSynNuc$TG-AllSynNuc$AC)/(AllSynNuc$TG+AllSynNuc$AC); summary(AllSynNuc$TG_ACSkew)
AllSynNuc$TG = AllSynNuc$FrT+AllSynNuc$FrG
AllSynNuc$AC = AllSynNuc$FrA+AllSynNuc$FrC
AllSynNuc$TG_ACSkew = (AllSynNuc$TG-AllSynNuc$AC)/(AllSynNuc$TG+AllSynNuc$AC); summary(AllSynNuc$TG_ACSkew)
AllSynNuc$AC_TGSkew = -(AllSynNuc$TG-AllSynNuc$AC)/(AllSynNuc$TG+AllSynNuc$AC); summary(AllSynNuc$AC_TGSkew) #OUR
View(AllSynNuc)
View(matur)
ggscatter(AllSynNuc, x = "temperature", y = "FrT",
color = "#e61a0b", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+ stat_cor(
aes(label = paste(..rr.label.., ..p.label.., samplesize, sep = "~`,`~")),
label.x = 3
)
ggscatter(AllSynNuc, x = "temperature", y = "FrT",
color = "#e61a0b", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+ stat_cor(
aes(label = paste(..rr.label.., ..p.label.., samplesize, sep = "~`,`~")),
label.x = 3)
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$temperature),]; N = as.character(paste("N", nrow(AllSynNuc), sep=""))
ggscatter(AllSynNuc, x = "temperature", y = "FrT",
color = "#e61a0b", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrG",
color = "#009414", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrC",
color = "#5c5c5c", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrA",
color = "#0918e6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
######Figores
pdf("../Figures/WholeGenomeData.Actinopterygii.pdf")
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$temperature),]; N = as.character(paste("N", nrow(AllSynNuc), sep="")) #delete NA
ggscatter(AllSynNuc, x = "temperature", y = "FrT",
color = "#e61a0b", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrG",
color = "#009414", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrC",
color = "#5c5c5c", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrA",
color = "#0918e6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
dev.off()
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
pdf("../Figures/WholeGenomeData.Actinopterygii.TG-SACskew.pdf", width = 7, height = 8.5)
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
dev.off()
knitr::opts_chunk$set(echo = TRUE)
pdf("../Figures/WholeGenomeData.Actinopterygii.TG-SACskew.pdf", width = 7, height = 8.5)
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
dev.off()
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$temperature),]; N = as.character(paste("N", nrow(AllSynNuc), sep="")) #delete NA
ggscatter(AllSynNuc, x = "temperature", y = "FrT",
color = "#e61a0b", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of A")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrG",
color = "#009414", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of C")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrC",
color = "#5c5c5c", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of G")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "FrA",
color = "#0918e6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="Whole genome neutral fraction of T")+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
summary(lm(FrT ~ scale(temperature)+scale(matur_tm), data = AllSynNuc))
summary(lm(FrT ~ log2(temperature + 2)*log2(matur_tm), data = AllSynNuc))  # keep it for presentation!!!
summary(lm(FrT ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc))
summary(lm(FrG ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc)) # strong
summary(lm(FrA ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc)) # strong
summary(lm(GtoASkew ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc)) # the highest R^2 = 0.17
summary(lm(FrT ~ scale(temperature)+scale(matur_tm), data = AllSynNuc))
summary(lm(FrT ~ log2(temperature + 2)*log2(matur_tm), data = AllSynNuc))  # keep it for presentation!!!
summary(lm(FrT ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc))
summary(lm(FrG ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc)) # strong
summary(lm(FrA ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc)) # strong
summary(lm(TG_ACSkew ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc))
summary(lm(TG_ACSkew ~ scale(temperature + 2)+scale(matur_tm), data = AllSynNuc))
#Suppl. Mat. 2?
summary(lm(AC_TGSkew ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc))
summary(lm(AC_TGSkew ~ scale(temperature + 2)+scale(matur_tm), data = AllSynNuc))# ###PICS
summary(lm(AC_TGSkew ~ temperature, data = AllSynNuc))
nrow(AllSynNuc[!is.na(AllSynNuc$matur_tm),])
N = nrow(AllSynNuc[!is.na(AllSynNuc$matur_tm),])
medianTm = median(AllSynNuc[!is.na(AllSynNuc$matur_tm),]$matur_tm)
AllSynNuc$Longevity = "Na"
AllSynNuc[AllSynNuc$matur_tm < medianTm,]$Longevity = "ShortLived"
AllSynNuc[AllSynNuc$matur_tm >= medianTm,]$Longevity = "LongLived"
View(AllSynNuc)
AllSynNuc[AllSynNuc$matur_tm < medianTm,]$Longevity = "ShortLived"
medianTm
AllSynNuc$matur_tm
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$matur_tm),]
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$matur_tm),]; N = nrow(AllSynNuc)
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$matur_tm),]; N = as.character(paste("N", nrow(AllSynNuc), sep=""))
medianTm = median(AllSynNuc[!is.na(AllSynNuc$matur_tm),]$matur_tm)
AllSynNuc$Longevity = "Na"
AllSynNuc[AllSynNuc$matur_tm < medianTm,]$Longevity = "ShortLived"
AllSynNuc[AllSynNuc$matur_tm >= medianTm,]$Longevity = "LongLived"
View(AllSynNuc)
plot(AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$AC_TGSkew, col="#4da36c", xlab="Mean annual water temperature, C?", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline((0.331911-0.049196), 0.006172, col="#4da36c", lwd = 2)
par(new=TRUE)
plot(AllSynNuc[AllSynNuc$Longevity == "LongLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "LongLived",]$AC_TGSkew, col="#42cbf5", xlab="", ylab="", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline(0.331911, 0.006172, col="#42cbf5", lwd = 2)
legend("bottomright", legend=c( "Short time of maturation","Long time of maturation"), col=c("#4da36c","#42cbf5"), pch = 16)
plot(AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$AC_TGSkew, col="#4da36c", xlab="Mean annual water temperature, C?", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline((0.331911-0.049196), 0.006172, col="#4da36c", lwd = 2)
par(new=TRUE)
plot(AllSynNuc[AllSynNuc$Longevity == "LongLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "LongLived",]$AC_TGSkew, col="#42cbf5", xlab="", ylab="", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline(0.331911, 0.006172, col="#42cbf5", lwd = 2)
legend("bottomright", legend=c( "Short time of maturation","Long time of maturation"), col=c("#4da36c","#42cbf5"), pch = 16)
plot(AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$AC_TGSkew, col="#4da36c", xlab="Mean annual water temperature, C?", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline((0.331911-0.049196), 0.006172, col="#4da36c", lwd = 2)
par(new=TRUE)
plot(AllSynNuc[AllSynNuc$Longevity == "LongLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "LongLived",]$AC_TGSkew, col="#42cbf5", xlab="", ylab="", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline(0.331911, 0.006172, col="#42cbf5", lwd = 2)
legend("bottomright", legend=c( "Short time of maturation","Long time of maturation"), col=c("#4da36c","#42cbf5"), pch = 16)+stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
summary(lm(AC_TGSkew ~ temperature + Longevity, data = AllSynNuc))
summary(lm(AC_TGSkew ~ scale(temperature + 2)+scale(matur_tm), data = AllSynNuc))
summary(lm(AC_TGSkew ~ temperature, data = AllSynNuc))
#Suppl. Mat. 2?
summary(lm(AC_TGSkew ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc))
summary(lm(AC_TGSkew ~ log2(temperature + 2)+log2(matur_tm), data = AllSynNuc))
summary(lm(AC_TGSkew ~ scale(temperature + 2)+scale(matur_tm), data = AllSynNuc))# ###PICS
tree = read.tree('../Data/1raw/mtalign.aln.treefile.rooted')
row.names(AllSynNuc) = AllSynNuc$Species
tree_pruned = treedata(tree, AllSynNuc, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, AllSynNuc, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$AC_TGSkew = as.numeric(as.character(data$AC_TGSkew))
data$temperature = as.numeric(as.character(data$temperature))
data$matur_tm = as.numeric(as.character(data$matur_tm))
data_comp <- comparative.data(tree_pruned, data, Species, vcv=TRUE)
summary(pgls(AC_TGSkew ~ scale(temperature), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ scale(temperature), data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(temperature), data_comp, lambda="ML"))
View(data)
summary(pgls(log2(AC_TGSkew) ~ log2(temperature), data_comp, lambda="ML"))
summary( pgls(AC_TGSkew ~ log2(Temperature+2), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(Temperature+2), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(Temperature+2), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ scale(temperature), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature + 2) + log2(Tm), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ temperature, data_comp, lambda="ML"))
sunnary(pgls(AC_TGSkew ~ temperature + Tm, data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature + 2) + log2(matur_tm), data_comp, lambda="ML"))
tree = read.tree('../Data/1raw/mtalign.aln.treefile.rooted')
row.names(AllSynNuc) = AllSynNuc$Species
tree_pruned = treedata(tree, AllSynNuc, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, AllSynNuc, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$AC_TGSkew = as.numeric(as.character(data$AC_TGSkew))
data$temperature = as.numeric(as.character(data$temperature))
data$matur_tm = as.numeric(as.character(data$matur_tm))
data_comp <- comparative.data(tree_pruned, data, Species, vcv=TRUE)
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(temperature+2), data_comp, lambda="ML"))
tree = read.tree('../Data/1raw/mtalign.aln.treefile.rooted')
row.names(AllSynNuc) = AllSynNuc$Species
tree_pruned = treedata(tree, AllSynNuc, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, AllSynNuc, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$AC_TGSkew = as.numeric(as.character(data$AC_TGSkew))
data$temperature = as.numeric(as.character(data$temperature))
data$matur_tm = as.numeric(as.character(data$matur_tm))
data_comp <- comparative.data(tree_pruned, data, Species, vcv=TRUE)
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(temperature+2), data_comp, lambda="ML"))
tree = read.tree('../Data/1raw/mtalign.aln.treefile.rooted')
row.names(AllSynNuc) = AllSynNuc$Species
tree_pruned = treedata(tree, AllSynNuc, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, AllSynNuc, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$AC_TGSkew = as.numeric(as.character(data$AC_TGSkew))
data$temperature = as.numeric(as.character(data$temperature))
data$matur_tm = as.numeric(as.character(data$matur_tm))
data_comp <- comparative.data(tree_pruned, data, Species, vcv=TRUE)
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(temperature+2) ~ AC_TGSkew, data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ scale(temperature), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature + 2) + log2(matur_tm), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ temperature, data_comp, lambda="ML"))
sunnary(pgls(AC_TGSkew ~ temperature + matur_tm, data_comp, lambda="ML"))
tree = read.tree('../Data/1raw/mtalign.aln.treefile.rooted')
row.names(AllSynNuc) = AllSynNuc$Species
tree_pruned = treedata(tree, AllSynNuc, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_pruned, AllSynNuc, sort=T, warnings=T)$data)
data$Species = as.character(data$Species)
data$AC_TGSkew = as.numeric(as.character(data$AC_TGSkew))
data$temperature = as.numeric(as.character(data$temperature))
data$matur_tm = as.numeric(as.character(data$matur_tm))
data_comp <- comparative.data(tree_pruned, data, Species, vcv=TRUE)
summary(pgls(AC_TGSkew ~ log2(temperature+2), data_comp, lambda="ML"))
summary(pgls(log2(temperature+2) ~ AC_TGSkew, data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ scale(temperature), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ log2(temperature + 2) + log2(matur_tm), data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ temperature, data_comp, lambda="ML"))
summary(pgls(AC_TGSkew ~ temperature + matur_tm, data_comp, lambda="ML"))
summary(pgls(log2(AC_TGSkew) ~ log2(temperature+2), data_comp, lambda="ML"))
####FIgures
pdf("../Figures/WholeGenomeData.Actinopterygii.TG-SACskewWithTempAndTm.pdf", width = 7, height = 8.5)
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$matur_tm),]; N = as.character(paste("N", nrow(AllSynNuc), sep=""))
medianTm = median(AllSynNuc[!is.na(AllSynNuc$matur_tm),]$matur_tm)
AllSynNuc$Longevity = "Na"
AllSynNuc[AllSynNuc$matur_tm < medianTm,]$Longevity = "ShortLived"
AllSynNuc[AllSynNuc$matur_tm >= medianTm,]$Longevity = "LongLived"
plot(AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$AC_TGSkew, col="#4da36c", xlab="Mean annual water temperature, C?", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline((0.331911-0.049196), 0.006172, col="#4da36c", lwd = 2)
par(new=TRUE)
plot(AllSynNuc[AllSynNuc$Longevity == "LongLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "LongLived",]$AC_TGSkew, col="#42cbf5", xlab="", ylab="", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline(0.331911, 0.006172, col="#42cbf5", lwd = 2)
legend("bottomright", legend=c( "Short time of maturation","Long time of maturation"), col=c("#4da36c","#42cbf5"), pch = 16)
dev.off()
pdf("../Figures/WholeGenomeData.Actinopterygii.TG-SACskew.pdf", width = 7, height = 8.5)
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", label.x = 5, label.y = 0.64, aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
dev.off()
pdf("../Figures/WholeGenomeData.Actinopterygii.TG-SACskew.pdf", width = 7, height = 8.5)
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", label.x = 2.5, label.y = 0.64, aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
dev.off()
ggscatter(AllSynNuc, x = "temperature", y = "AC_TGSkew",
color = "#c99bc9", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Mean annual water temperature, ?C", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30))+stat_cor(method = "spearman", label.x = 2.5, label.y = 0.64, aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
AllSynNuc = AllSynNuc[!is.na(AllSynNuc$matur_tm),]; N = as.character(paste("N", nrow(AllSynNuc), sep=""))
medianTm = median(AllSynNuc[!is.na(AllSynNuc$matur_tm),]$matur_tm)
AllSynNuc$Longevity = "Na"
AllSynNuc[AllSynNuc$matur_tm < medianTm,]$Longevity = "ShortLived"
AllSynNuc[AllSynNuc$matur_tm >= medianTm,]$Longevity = "LongLived"
plot(AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "ShortLived",]$AC_TGSkew, col="#4da36c", xlab="Mean annual water temperature, C?", ylab="STG-SAC skew", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline((0.331911-0.049196), 0.006172, col="#4da36c", lwd = 2)
par(new=TRUE)
plot(AllSynNuc[AllSynNuc$Longevity == "LongLived",]$temperature, AllSynNuc[AllSynNuc$Longevity == "LongLived",]$AC_TGSkew, col="#42cbf5", xlab="", ylab="", ylim=c(0.1, 0.65), xlim=c(0,30), pch = 16)
abline(0.331911, 0.006172, col="#42cbf5", lwd = 2)
legend("bottomright", legend=c( "Short time of maturation","Long time of maturation"), col=c("#4da36c","#42cbf5"), pch = 16)
