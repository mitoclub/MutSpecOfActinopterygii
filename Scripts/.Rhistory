print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 3
summary(mutSpec$NumOfFourFoldMut)
mutSpecForPca = mutSpec[mutSpec$NumOfFourFoldMut >= 10,]
mutSpecForPca = mutSpecForPca[grepl('\\.SubstRate.heavy',names(mutSpecForPca))]
#mutSpecForPca = mutSpecForPca/mutSpec$TotalSubstRate.heavy
#mutSpecForPca = mutSpecForPca[!is.na(mutSpecForPca$C_T.SubstRate.heavy),]
#mutSpecForPca = mutSpecForPca[mutSpecForPca$C_T.SubstRate.heavy < Inf,]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
dev.off()
library(caper)
library(geiger)
library(ggplot2)
library(dplyr)
rm(list=ls(all=TRUE))
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
mutSpec = mutSpec[mutSpec$Class == 'Actinopterygii',]
mutSpec = mutSpec[mutSpec$Gene == 'CytB',]
summary(mutSpec$temperature)
mutSpec = mutSpec[!is.na(mutSpec$temperature),]
nrow(mutSpec)
cor.test(mutSpec$T_C.N,mutSpec$NumOfFourFoldMut, method = 'spearman') # Ah>Gh
cor.test(mutSpec$T_C.N,mutSpec$NumberOfSeq, method = 'spearman')      # Ah>Gh
A<-lm(mutSpec$T_C.N ~ scale(mutSpec$temperature) + scale(mutSpec$NumOfFourFoldMut))
summary(A)
B<-lm(mutSpec$T_C.N ~ scale(mutSpec$temperature) + scale(mutSpec$NumberOfSeq))
summary(B)
mutSpec$A_G.SubstRate.heavy = mutSpec$T_C/mutSpec$T
mutSpec$A_T.SubstRate.heavy = mutSpec$T_A/mutSpec$T
mutSpec$A_C.SubstRate.heavy = mutSpec$T_G/mutSpec$T
mutSpec$T_G.SubstRate.heavy = mutSpec$A_C/mutSpec$A
mutSpec$T_A.SubstRate.heavy = mutSpec$A_T/mutSpec$A
mutSpec$T_C.SubstRate.heavy = mutSpec$A_G/mutSpec$A
mutSpec$G_T.SubstRate.heavy = mutSpec$C_A/mutSpec$C
mutSpec$G_C.SubstRate.heavy = mutSpec$C_G/mutSpec$C
mutSpec$G_A.SubstRate.heavy = mutSpec$C_T/mutSpec$C
mutSpec$C_G.SubstRate.heavy = mutSpec$G_C/mutSpec$G
mutSpec$C_T.SubstRate.heavy = mutSpec$G_A/mutSpec$G
mutSpec$C_A.SubstRate.heavy = mutSpec$G_T/mutSpec$G
mutSpec$TotalSubstRate.heavy = mutSpec$A_G.SubstRate.heavy + mutSpec$A_T.SubstRate.heavy + mutSpec$A_C.SubstRate.heavy
+ mutSpec$T_G.SubstRate.heavy + mutSpec$T_A.SubstRate.heavy + mutSpec$T_C.SubstRate.heavy
+ mutSpec$G_T.SubstRate.heavy + mutSpec$G_C.SubstRate.heavy + mutSpec$G_A.SubstRate.heavy
+ mutSpec$C_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$C_A.SubstRate.heavy
mutSpec$TotalTsSubstRate.heavy = mutSpec$A_G.SubstRate.heavy + mutSpec$G_A.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy +  mutSpec$T_C.SubstRate.heavy
mutSpec$TotalTvSubstRate.heavy = mutSpec$A_T.SubstRate.heavy + mutSpec$A_C.SubstRate.heavy + mutSpec$T_G.SubstRate.heavy + mutSpec$T_A.SubstRate.heavy + mutSpec$G_T.SubstRate.heavy + mutSpec$G_C.SubstRate.heavy + mutSpec$C_G.SubstRate.heavy + mutSpec$C_A.SubstRate.heavy
## integral MutSpec looks good:
barplot(c(mean(mutSpec$A_G.SubstRate.heavy),mean(mutSpec$A_T.SubstRate.heavy),mean(mutSpec$A_C.SubstRate.heavy),
mean(mutSpec$T_G.SubstRate.heavy),mean(mutSpec$T_A.SubstRate.heavy),mean(mutSpec$T_C.SubstRate.heavy),
mean(mutSpec$G_T.SubstRate.heavy),mean(mutSpec$G_C.SubstRate.heavy),mean(mutSpec$G_A.SubstRate.heavy),
mean(mutSpec$C_G.SubstRate.heavy),mean(mutSpec$C_T.SubstRate.heavy),mean(mutSpec$C_A.SubstRate.heavy)), names = c('Ah>Gh','Ah>Th','Ah>Ch','Th>Gh','Th>Ah','Th>Ch','Gh>Th','Gh>Ch','Gh>Ah','Ch>Gh','Ch>Th','Ch>Ah'), cex.names = 0.65)
## if there is a correlation of substitution rates with the number of sequences? No, because normalization is OK now
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
## if there is a correlation between the  substitution rates and NumberOfFourFoldMut? Yes, sure
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
## total substitution rate - if there is correlation with temperature? yes. Warm water mutate faster in general and Ah>Gh is the best among them!?
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # positive
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$T_C.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # nothing
cor.test(mutSpec$G_A.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$TotalTsSubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$TotalTvSubstRate.heavy, mutSpec$temperature, method = 'spearman') # about to be absent
### A>G as a function of temperature and total number of substitutions
A<-lm(mutSpec$A_G.SubstRate.heavy ~ mutSpec$temperature + mutSpec$TotalSubstRate.heavy); summary(A)
A<-lm(mutSpec$A_G.SubstRate.heavy ~ mutSpec$temperature); summary(A)
A<-lm(mutSpec$A_G.SubstRate.heavy/mutSpec$TotalSubstRate.heavy ~ mutSpec$temperature); summary(A)
B<-lm(mutSpec$C_T.SubstRate.heavy ~ mutSpec$temperature + mutSpec$TotalSubstRate.heavy); summary(B)
B<-lm(mutSpec$C_T.SubstRate.heavy ~ mutSpec$temperature); summary(B)
# B<-lm(mutSpec$C_T.SubstRate.heavy/mutSpec$TotalSubstRate.heavy ~ mutSpec$temperature); summary(B) # Inf sometimes...
### backward multiple model
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalSubstRate.heavy + mutSpec$TotalTsSubstRate.heavy + mutSpec$TotalTvSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy + mutSpec$TotalTvSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy/mutSpec$T_C.SubstRate.heavy); summary(C) ### DIGEST IT!!!!!!!!!!
### prcomp
pdf('../Figures/CriticalThinkingAgainKp.PleaseDeleteMeLater.pdf')
## VAR 1
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 2
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
mutSpecForPca = mutSpecForPca/mutSpec$TotalSubstRate.heavy
mutSpecForPca = mutSpecForPca[!is.na(mutSpecForPca$C_T.SubstRate.heavy),]
mutSpecForPca = mutSpecForPca[mutSpecForPca$C_T.SubstRate.heavy < Inf,]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 3
summary(mutSpec$NumOfFourFoldMut)
mutSpecForPca = mutSpec[mutSpec$NumOfFourFoldMut >= 10,]
mutSpecForPca = mutSpecForPca[grepl('\\.SubstRate.heavy',names(mutSpecForPca))]
#mutSpecForPca = mutSpecForPca/mutSpec$TotalSubstRate.heavy
#mutSpecForPca = mutSpecForPca[!is.na(mutSpecForPca$C_T.SubstRate.heavy),]
#mutSpecForPca = mutSpecForPca[mutSpecForPca$C_T.SubstRate.heavy < Inf,]
#Pca = prcomp(mutSpecForPca, scale = TRUE)
Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
dev.off()
library(caper)
library(geiger)
library(ggplot2)
library(dplyr)
rm(list=ls(all=TRUE))
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
mutSpec = mutSpec[mutSpec$Class == 'Actinopterygii',]
mutSpec = mutSpec[mutSpec$Gene == 'CytB',]
summary(mutSpec$temperature)
mutSpec = mutSpec[!is.na(mutSpec$temperature),]
nrow(mutSpec)
cor.test(mutSpec$T_C.N,mutSpec$NumOfFourFoldMut, method = 'spearman') # Ah>Gh
cor.test(mutSpec$T_C.N,mutSpec$NumberOfSeq, method = 'spearman')      # Ah>Gh
A<-lm(mutSpec$T_C.N ~ scale(mutSpec$temperature) + scale(mutSpec$NumOfFourFoldMut))
summary(A)
B<-lm(mutSpec$T_C.N ~ scale(mutSpec$temperature) + scale(mutSpec$NumberOfSeq))
summary(B)
mutSpec$A_G.SubstRate.heavy = mutSpec$T_C/mutSpec$T
mutSpec$A_T.SubstRate.heavy = mutSpec$T_A/mutSpec$T
mutSpec$A_C.SubstRate.heavy = mutSpec$T_G/mutSpec$T
mutSpec$T_G.SubstRate.heavy = mutSpec$A_C/mutSpec$A
mutSpec$T_A.SubstRate.heavy = mutSpec$A_T/mutSpec$A
mutSpec$T_C.SubstRate.heavy = mutSpec$A_G/mutSpec$A
mutSpec$G_T.SubstRate.heavy = mutSpec$C_A/mutSpec$C
mutSpec$G_C.SubstRate.heavy = mutSpec$C_G/mutSpec$C
mutSpec$G_A.SubstRate.heavy = mutSpec$C_T/mutSpec$C
mutSpec$C_G.SubstRate.heavy = mutSpec$G_C/mutSpec$G
mutSpec$C_T.SubstRate.heavy = mutSpec$G_A/mutSpec$G
mutSpec$C_A.SubstRate.heavy = mutSpec$G_T/mutSpec$G
mutSpec$TotalSubstRate.heavy = mutSpec$A_G.SubstRate.heavy + mutSpec$A_T.SubstRate.heavy + mutSpec$A_C.SubstRate.heavy
+ mutSpec$T_G.SubstRate.heavy + mutSpec$T_A.SubstRate.heavy + mutSpec$T_C.SubstRate.heavy
+ mutSpec$G_T.SubstRate.heavy + mutSpec$G_C.SubstRate.heavy + mutSpec$G_A.SubstRate.heavy
+ mutSpec$C_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$C_A.SubstRate.heavy
mutSpec$TotalTsSubstRate.heavy = mutSpec$A_G.SubstRate.heavy + mutSpec$G_A.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy +  mutSpec$T_C.SubstRate.heavy
mutSpec$TotalTvSubstRate.heavy = mutSpec$A_T.SubstRate.heavy + mutSpec$A_C.SubstRate.heavy + mutSpec$T_G.SubstRate.heavy + mutSpec$T_A.SubstRate.heavy + mutSpec$G_T.SubstRate.heavy + mutSpec$G_C.SubstRate.heavy + mutSpec$C_G.SubstRate.heavy + mutSpec$C_A.SubstRate.heavy
## integral MutSpec looks good:
barplot(c(mean(mutSpec$A_G.SubstRate.heavy),mean(mutSpec$A_T.SubstRate.heavy),mean(mutSpec$A_C.SubstRate.heavy),
mean(mutSpec$T_G.SubstRate.heavy),mean(mutSpec$T_A.SubstRate.heavy),mean(mutSpec$T_C.SubstRate.heavy),
mean(mutSpec$G_T.SubstRate.heavy),mean(mutSpec$G_C.SubstRate.heavy),mean(mutSpec$G_A.SubstRate.heavy),
mean(mutSpec$C_G.SubstRate.heavy),mean(mutSpec$C_T.SubstRate.heavy),mean(mutSpec$C_A.SubstRate.heavy)), names = c('Ah>Gh','Ah>Th','Ah>Ch','Th>Gh','Th>Ah','Th>Ch','Gh>Th','Gh>Ch','Gh>Ah','Ch>Gh','Ch>Th','Ch>Ah'), cex.names = 0.65)
## if there is a correlation of substitution rates with the number of sequences? No, because normalization is OK now
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
## if there is a correlation between the  substitution rates and NumberOfFourFoldMut? Yes, sure
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
## total substitution rate - if there is correlation with temperature? yes. Warm water mutate faster in general and Ah>Gh is the best among them!?
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # positive
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$T_C.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # nothing
cor.test(mutSpec$G_A.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$TotalTsSubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$TotalTvSubstRate.heavy, mutSpec$temperature, method = 'spearman') # about to be absent
### A>G as a function of temperature and total number of substitutions
A<-lm(mutSpec$A_G.SubstRate.heavy ~ mutSpec$temperature + mutSpec$TotalSubstRate.heavy); summary(A)
A<-lm(mutSpec$A_G.SubstRate.heavy ~ mutSpec$temperature); summary(A)
A<-lm(mutSpec$A_G.SubstRate.heavy/mutSpec$TotalSubstRate.heavy ~ mutSpec$temperature); summary(A)
B<-lm(mutSpec$C_T.SubstRate.heavy ~ mutSpec$temperature + mutSpec$TotalSubstRate.heavy); summary(B)
B<-lm(mutSpec$C_T.SubstRate.heavy ~ mutSpec$temperature); summary(B)
# B<-lm(mutSpec$C_T.SubstRate.heavy/mutSpec$TotalSubstRate.heavy ~ mutSpec$temperature); summary(B) # Inf sometimes...
### backward multiple model
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalSubstRate.heavy + mutSpec$TotalTsSubstRate.heavy + mutSpec$TotalTvSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy + mutSpec$TotalTvSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy/mutSpec$T_C.SubstRate.heavy); summary(C) ### DIGEST IT!!!!!!!!!!
### prcomp
pdf('../Figures/CriticalThinkingAgainKp.PleaseDeleteMeLater.pdf')
## VAR 1
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 2
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
mutSpecForPca = mutSpecForPca/mutSpec$TotalSubstRate.heavy
mutSpecForPca = mutSpecForPca[!is.na(mutSpecForPca$C_T.SubstRate.heavy),]
mutSpecForPca = mutSpecForPca[mutSpecForPca$C_T.SubstRate.heavy < Inf,]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 3
summary(mutSpec$NumOfFourFoldMut)
mutSpecForPca = mutSpec[mutSpec$NumOfFourFoldMut >= 10,]
mutSpecForPca = mutSpecForPca[grepl('\\.SubstRate.heavy',names(mutSpecForPca))]
Pca = prcomp(mutSpecForPca, scale = TRUE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
dev.off()
library(caper)
library(geiger)
library(ggplot2)
library(dplyr)
rm(list=ls(all=TRUE))
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
mutSpec = mutSpec[mutSpec$Class == 'Actinopterygii',]
mutSpec = mutSpec[mutSpec$Gene == 'CytB',]
summary(mutSpec$temperature)
mutSpec = mutSpec[!is.na(mutSpec$temperature),]
nrow(mutSpec)
cor.test(mutSpec$T_C.N,mutSpec$NumOfFourFoldMut, method = 'spearman') # Ah>Gh
cor.test(mutSpec$T_C.N,mutSpec$NumberOfSeq, method = 'spearman')      # Ah>Gh
A<-lm(mutSpec$T_C.N ~ scale(mutSpec$temperature) + scale(mutSpec$NumOfFourFoldMut))
summary(A)
B<-lm(mutSpec$T_C.N ~ scale(mutSpec$temperature) + scale(mutSpec$NumberOfSeq))
summary(B)
mutSpec$A_G.SubstRate.heavy = mutSpec$T_C/mutSpec$T
mutSpec$A_T.SubstRate.heavy = mutSpec$T_A/mutSpec$T
mutSpec$A_C.SubstRate.heavy = mutSpec$T_G/mutSpec$T
mutSpec$T_G.SubstRate.heavy = mutSpec$A_C/mutSpec$A
mutSpec$T_A.SubstRate.heavy = mutSpec$A_T/mutSpec$A
mutSpec$T_C.SubstRate.heavy = mutSpec$A_G/mutSpec$A
mutSpec$G_T.SubstRate.heavy = mutSpec$C_A/mutSpec$C
mutSpec$G_C.SubstRate.heavy = mutSpec$C_G/mutSpec$C
mutSpec$G_A.SubstRate.heavy = mutSpec$C_T/mutSpec$C
mutSpec$C_G.SubstRate.heavy = mutSpec$G_C/mutSpec$G
mutSpec$C_T.SubstRate.heavy = mutSpec$G_A/mutSpec$G
mutSpec$C_A.SubstRate.heavy = mutSpec$G_T/mutSpec$G
mutSpec$TotalSubstRate.heavy = mutSpec$A_G.SubstRate.heavy + mutSpec$A_T.SubstRate.heavy + mutSpec$A_C.SubstRate.heavy
+ mutSpec$T_G.SubstRate.heavy + mutSpec$T_A.SubstRate.heavy + mutSpec$T_C.SubstRate.heavy
+ mutSpec$G_T.SubstRate.heavy + mutSpec$G_C.SubstRate.heavy + mutSpec$G_A.SubstRate.heavy
+ mutSpec$C_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$C_A.SubstRate.heavy
mutSpec$TotalTsSubstRate.heavy = mutSpec$A_G.SubstRate.heavy + mutSpec$G_A.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy +  mutSpec$T_C.SubstRate.heavy
mutSpec$TotalTvSubstRate.heavy = mutSpec$A_T.SubstRate.heavy + mutSpec$A_C.SubstRate.heavy + mutSpec$T_G.SubstRate.heavy + mutSpec$T_A.SubstRate.heavy + mutSpec$G_T.SubstRate.heavy + mutSpec$G_C.SubstRate.heavy + mutSpec$C_G.SubstRate.heavy + mutSpec$C_A.SubstRate.heavy
## integral MutSpec looks good:
barplot(c(mean(mutSpec$A_G.SubstRate.heavy),mean(mutSpec$A_T.SubstRate.heavy),mean(mutSpec$A_C.SubstRate.heavy),
mean(mutSpec$T_G.SubstRate.heavy),mean(mutSpec$T_A.SubstRate.heavy),mean(mutSpec$T_C.SubstRate.heavy),
mean(mutSpec$G_T.SubstRate.heavy),mean(mutSpec$G_C.SubstRate.heavy),mean(mutSpec$G_A.SubstRate.heavy),
mean(mutSpec$C_G.SubstRate.heavy),mean(mutSpec$C_T.SubstRate.heavy),mean(mutSpec$C_A.SubstRate.heavy)), names = c('Ah>Gh','Ah>Th','Ah>Ch','Th>Gh','Th>Ah','Th>Ch','Gh>Th','Gh>Ch','Gh>Ah','Ch>Gh','Ch>Th','Ch>Ah'), cex.names = 0.65)
## if there is a correlation of substitution rates with the number of sequences? No, because normalization is OK now
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$NumberOfSeq, method = 'spearman') # no
## if there is a correlation between the  substitution rates and NumberOfFourFoldMut? Yes, sure
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$NumOfFourFoldMut, method = 'spearman') # very positive
## total substitution rate - if there is correlation with temperature? yes. Warm water mutate faster in general and Ah>Gh is the best among them!?
cor.test(mutSpec$TotalSubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$A_G.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # positive
cor.test(mutSpec$C_T.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$T_C.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # nothing
cor.test(mutSpec$G_A.SubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$TotalTsSubstRate.heavy, mutSpec$temperature, method = 'spearman') # a bit positive
cor.test(mutSpec$TotalTvSubstRate.heavy, mutSpec$temperature, method = 'spearman') # about to be absent
### A>G as a function of temperature and total number of substitutions
A<-lm(mutSpec$A_G.SubstRate.heavy ~ mutSpec$temperature + mutSpec$TotalSubstRate.heavy); summary(A)
A<-lm(mutSpec$A_G.SubstRate.heavy ~ mutSpec$temperature); summary(A)
A<-lm(mutSpec$A_G.SubstRate.heavy/mutSpec$TotalSubstRate.heavy ~ mutSpec$temperature); summary(A)
B<-lm(mutSpec$C_T.SubstRate.heavy ~ mutSpec$temperature + mutSpec$TotalSubstRate.heavy); summary(B)
B<-lm(mutSpec$C_T.SubstRate.heavy ~ mutSpec$temperature); summary(B)
# B<-lm(mutSpec$C_T.SubstRate.heavy/mutSpec$TotalSubstRate.heavy ~ mutSpec$temperature); summary(B) # Inf sometimes...
### backward multiple model
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalSubstRate.heavy + mutSpec$TotalTsSubstRate.heavy + mutSpec$TotalTvSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy + mutSpec$TotalTvSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$C_T.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy + mutSpec$TotalTsSubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy); summary(C)
C<-lm(mutSpec$temperature ~ mutSpec$A_G.SubstRate.heavy/mutSpec$T_C.SubstRate.heavy); summary(C) ### DIGEST IT!!!!!!!!!!
### prcomp
pdf('../Figures/CriticalThinkingAgainKp.PleaseDeleteMeLater.pdf')
## VAR 1
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 2
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
mutSpecForPca = mutSpecForPca/mutSpec$TotalSubstRate.heavy
mutSpecForPca = mutSpecForPca[!is.na(mutSpecForPca$C_T.SubstRate.heavy),]
mutSpecForPca = mutSpecForPca[mutSpecForPca$C_T.SubstRate.heavy < Inf,]
Pca = prcomp(mutSpecForPca, scale = TRUE)
#Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 3
mutSpecForPca = mutSpec[grepl('\\.SubstRate.heavy',names(mutSpec))]
mutSpecForPca = mutSpecForPca/mutSpec$TotalSubstRate.heavy
mutSpecForPca = mutSpecForPca[!is.na(mutSpecForPca$C_T.SubstRate.heavy),]
mutSpecForPca = mutSpecForPca[mutSpecForPca$C_T.SubstRate.heavy < Inf,]
#Pca = prcomp(mutSpecForPca, scale = TRUE)
Pca = prcomp(mutSpecForPca, scale = FALSE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
## VAR 4
summary(mutSpec$NumOfFourFoldMut)
mutSpecForPca = mutSpec[mutSpec$NumOfFourFoldMut >= 10,]
mutSpecForPca = mutSpecForPca[grepl('\\.SubstRate.heavy',names(mutSpecForPca))]
Pca = prcomp(mutSpecForPca, scale = TRUE)
print(Pca)
LinearCombinationForPC1 <- Pca$rotation[,1] # temperature?
LinearCombinationForPC2 <- Pca$rotation[,2]
LinearCombinationForPC3 <- Pca$rotation[,3] # temperature?
summary(Pca)
plot(Pca)
biplot(Pca,col = c("white","black"))
dev.off()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
mutSpecCytB = mutSpec[mutSpec$Gene == "CytB",]
mutSpecAllMean = mutSpec %>% group_by(Species, Class, temperature, matur_tm); mutSpecAllMean = mutSpecAllMean %>% summarise(A_C.N=mean(A_C.N), A_G.N=mean(A_G.N), A_T.N=mean(A_T.N), C_A.N=mean(C_A.N), C_G.N=mean(C_G.N), C_T.N=mean(C_T.N), G_A.N=mean(G_A.N), G_C.N=mean(G_C.N), G_T.N=mean(G_T.N), T_A.N=mean(T_A.N), T_C.N=mean(T_C.N), T_G.N=mean(T_G.N))
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
View(mutSpecAllMean)
View(mutSpec)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
mutSpecCytB = mutSpec[mutSpec$Gene == "CytB",]
mutSpecAllMean = mutSpec %>% group_by(Species, Class, temperature, matur_tm); mutSpecAllMean = mutSpecAllMean %>% summarise(A_C.SubstRate.heavy=mean(A_C.SubstRate.heavy), A_G.SubstRate.heavy=mean(A_G.SubstRate.heavy), A_T.SubstRate.heavy=mean(A_T.SubstRate.heavy), C_A.SubstRate.heavy=mean(C_A.SubstRate.heavy), C_G.SubstRate.heavy=mean(C_G.SubstRate.heavy), C_T.SubstRate.heavy=mean(C_T.SubstRate.heavy), G_A.SubstRate.heavy=mean(G_A.SubstRate.heavy), G_C.SubstRate.heavy=mean(G_C.SubstRate.heavy), G_T.SubstRate.heavy=mean(G_T.SubstRate.heavy), T_A.SubstRate.heavy=mean(T_A.SubstRate.heavy), T_C.SubstRate.heavy=mean(T_C.SubstRate.heavy), T_G.SubstRate.heavy=mean(T_G.SubstRate.heavy))
table(mutSpecAllMean[!is.na(mutSpecAllMean$temperature),]$Class)
averageMutSpec = mutSpecAllMean[!is.na(mutSpecAllMean$temperature),][,5:16]; summary(averageMutSpec)
averageMutSpec = averageMutSpec[!is.na(averageMutSpec$G_A.SubstRate.heavy) & !is.na(averageMutSpec$G_C.SubstRate.heavy) & !is.na(averageMutSpec$G_T.SubstRate.heavy),]; summary(averageMutSpec)
averageMutSpec = as.data.frame(apply(averageMutSpec, 2, mean)); averageMutSpec$Subs = row.names(averageMutSpec); names(averageMutSpec) = c("Freq", "Subs")
f1 = ggbarplot(averageMutSpec, x = "Subs", y = "Freq", fill = "Subs", color = "Subs",
palette = c("#bdbdbd", "#036a5b", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#9c3d37", "#055088", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#73514f", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", legend = "none")
f1
cor.test(mutSpecCytB$A_T.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$T_A.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$T_C.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$G_A.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$G_T.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$G_C.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$C_A.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$C_T.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecCytB$C_G.SubstRate.heavy,mutSpecCytB$temperature, method = 'spearman')
cor.test(mutSpecAllMean$A_T.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$A_G.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$A_C.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$T_A.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$T_G.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$T_C.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$G_A.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$G_T.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$G_C.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$C_A.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$C_T.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
cor.test(mutSpecAllMean$C_G.SubstRate.heavy,mutSpecAllMean$temperature, method = 'spearman')
mutSpecAllMean$TCdivAG=mutSpecAllMean$T_C.SubstRate.heavy/mutSpecAllMean$A_G.SubstRate.heavy
mutSpecAllMean[mutSpecAllMean$TCdivAG == "Inf" | mutSpecAllMean$TCdivAG == "NaN",]$TCdivAG = NA
cor.test(mutSpecAllMean$TCdivAG,mutSpecAllMean$temperature, method = 'spearman')
mutSpecAllMean$GAdivCT=mutSpecAllMean$G_A.SubstRate.heavy/mutSpecAllMean$C_T.SubstRate.heavy
mutSpecAllMean[mutSpecAllMean$GAdivCT == "Inf" | mutSpecAllMean$GAdivCT == "NaN" | is.na(mutSpecAllMean$GAdivCT),]$GAdivCT = NA
cor.test(mutSpecAllMean$GAdivCT,mutSpecAllMean$temperature, method = 'spearman')
mutSpecAllMean = mutSpecAllMean[!is.na(mutSpecAllMean$temperature),]; N = as.character(paste("N", nrow(mutSpecAllMean), sep="")) #delete NA
f1a = ggscatter(mutSpecAllMean, x = "temperature", y = "T_C.SubstRate.heavy",
color = "#73514f", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 AH>GH") + stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1a
f1b1 = ggscatter(mutSpecAllMean, x = "temperature", y = "G_A.SubstRate.heavy",
color = "#055088", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 CH>TH")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1b1
mutSpecAllMean = mutSpecAllMean[!is.na(mutSpecAllMean$temperature),]; N = as.character(paste("N", nrow(mutSpecAllMean), sep="")) #delete NA
f1a = ggscatter(mutSpecAllMean, x = "temperature", y = "T_C.SubstRate.heavy",
color = "#73514f", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
xlab="Median annual water temperature, ?C", ylab="log2 AH>GH") + stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1a
mutSpecAllMean = mutSpecAllMean[!is.na(mutSpecAllMean$temperature),]; N = as.character(paste("N", nrow(mutSpecAllMean), sep="")) #delete NA
f1a = ggscatter(mutSpecAllMean, x = "temperature", y = "T_C.SubstRate.heavy",
color = "#73514f", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 AH>GH") + stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1a
f1b2 = ggscatter(mutSpecAllMean, x = "temperature", y = "C_T.SubstRate.heavy",
color = "#9c3d37", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 GH>AH")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1b2
f1c = ggscatter(mutSpecAllMean, x = "temperature", y = "TCdivAG",
color = "#814194", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 A_GdivT_C")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1c
f1d = ggscatter(mutSpecAllMean, x = "temperature", y = "GAdivCT",
color = "#8C99A6", # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "black", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
yscale = "log2", xlab="Median annual water temperature, ?C", ylab="log2 C_TdivG_A")+ stat_cor(method = "spearman", aes(label = paste(..r.label.., ..p.label.., ..N.., sep = "~`,`~")))
f1d
rm(list=ls(all=TRUE))
if (!require(caper)) install.packages("caper")
if (!require(geiger)) install.packages("geiger")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(dplyr)) install.packages("dplyr")
library(caper)
library(geiger)
library(ggpubr)
library(dplyr)
mutSpec = read.table('../Data/3results/VertebratePolymorphisms.MutSpecData.txt', header = TRUE)
View(mutSpec)
mutSpecCytB = mutSpec[mutSpec$Gene == "CytB",]
mutSpecAllMean = mutSpec %>% group_by(Species, Class, temperature, matur_tm); mutSpecAllMean = mutSpecAllMean %>% summarise(A_C.SubstRate.heavy=mean(A_C.SubstRate.heavy), A_G.SubstRate.heavy=mean(A_G.SubstRate.heavy), A_T.SubstRate.heavy=mean(A_T.SubstRate.heavy), C_A.SubstRate.heavy=mean(C_A.SubstRate.heavy), C_G.SubstRate.heavy=mean(C_G.SubstRate.heavy), C_T.SubstRate.heavy=mean(C_T.SubstRate.heavy), G_A.SubstRate.heavy=mean(G_A.SubstRate.heavy), G_C.SubstRate.heavy=mean(G_C.SubstRate.heavy), G_T.SubstRate.heavy=mean(G_T.SubstRate.heavy), T_A.SubstRate.heavy=mean(T_A.SubstRate.heavy), T_C.SubstRate.heavy=mean(T_C.SubstRate.heavy), T_G.SubstRate.heavy=mean(T_G.SubstRate.heavy))
table(mutSpecAllMean[!is.na(mutSpecAllMean$temperature),]$Class)
View(mutSpecAllMean)
View(mutSpecAllMean)
averageMutSpec = mutSpecAllMean[!is.na(mutSpecAllMean$temperature),][,5:16]; summary(averageMutSpec)
averageMutSpec = averageMutSpec[!is.na(averageMutSpec$G_A.SubstRate.heavy) & !is.na(averageMutSpec$G_C.SubstRate.heavy) & !is.na(averageMutSpec$G_T.SubstRate.heavy),]; summary(averageMutSpec)
averageMutSpec = as.data.frame(apply(averageMutSpec, 2, mean)); averageMutSpec$Subs = row.names(averageMutSpec); names(averageMutSpec) = c("Freq", "Subs")
f1 = ggbarplot(averageMutSpec, x = "Subs", y = "Freq", fill = "Subs", color = "Subs",
palette = c("#bdbdbd", "#036a5b", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#9c3d37", "#055088", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#73514f", "#bdbdbd"),
xlab="Substitution types", ylab="Normalised frequencies", legend = "none")
f1
View(averageMutSpec)
